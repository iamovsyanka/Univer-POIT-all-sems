const redis = require('redis');
const config = require('./options');

const client = redis.createClient(config.redis);

//client будет выдавать connect, как только поток будет подключен к серверу.
client.on('connect', () => {
    console.log('connect');
});

// client будет выдавать ready, как только соединение будет установлено.
// Команды, выданные до ready события, помещаются в очередь,
// а затем воспроизводятся непосредственно перед этим событием.
client.on('ready', () => {
    console.log('ready');
});

//client будет выдавать error при обнаружении ошибки подключения к серверу Redis или
// при возникновении любой другой в узле Redis. Если вы используете команду
// без обратного вызова и сталкиваетесь с ReplyError, она будет выдана прослушивателю ошибок
client.on('error', err => {
    console.log('error: ' + err);
});

//client будет выдавать end, когда установленное соединение Redis server было закрыто.
client.on('end', () => {
    console.log('end');
});

//client будет выдавать warning, когда пароль был установлен, но он не нужен,
// и если используется устаревшая опция / функция / аналогичная.
client.on('warning', () => {
    console.log('warning');
});

/* отправляет команду quit на сервер redis и заканчивается чисто сразу после того,
как все запущенные команды были правильно обработаны. Если это вызывается при повторном подключении
(и поэтому не существует никакого соединения с сервером redis), он сразу же завершит соединение,
а не приведет к дальнейшему повторному подключению! Все автономные команды будут сброшены
с ошибкой в этом случае.*/
client.quit();
